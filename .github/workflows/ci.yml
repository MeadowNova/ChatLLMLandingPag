name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Lint, Test & Build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
          
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./app
        run: npm run lint
        
      - name: Generate Prisma Client
        working-directory: ./app
        run: npx prisma generate
        
      - name: Type check
        working-directory: ./app
        run: npx tsc --noEmit
        
      - name: Run tests
        working-directory: ./app
        run: npm test --if-present
        
      - name: Build application
        working-directory: ./app
        run: npm run build
        
      - name: Validate build configuration
        working-directory: ./app
        run: npm run pre-push-check

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './app'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Setup Node.js for audit
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
          
      - name: Run npm audit
        working-directory: ./app
        run: npm audit --audit-level=high
        continue-on-error: true

  dependency-review:
    runs-on: ubuntu-latest
    name: Dependency Review
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          
  lighthouse-ci:
    runs-on: ubuntu-latest
    name: Lighthouse CI
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
          
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
        
      - name: Generate Prisma Client
        working-directory: ./app
        run: npx prisma generate
        
      - name: Build application
        working-directory: ./app
        run: npm run build
        
      - name: Run Lighthouse CI
        working-directory: ./app
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: app/
